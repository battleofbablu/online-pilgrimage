server.port=8088
spring.application.name=api-gateway

eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

spring.boot.admin.client.url=http://spring-boot-admin:9090
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
spring.boot.admin.client.instance.prefer-ip=true

# JWT shared secret (same as auth-service)
jwt.secret=mySuperSecretKeyForJWTs1234567890

# Optional: Allow CORS for frontend
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE


# Routes to microservices (you can add more as needed)

spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=lb://auth-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/auth/**

spring.cloud.gateway.routes[1].id=user-service
spring.cloud.gateway.routes[1].uri=lb://user-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/user/**

spring.cloud.gateway.routes[2].id=admin-service
spring.cloud.gateway.routes[2].uri=lb://admin-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/admin/**

spring.cloud.gateway.routes[3].id=administrator-service
spring.cloud.gateway.routes[3].uri=lb://administrator-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/administrator/**

spring.cloud.gateway.routes[4].id=hotel-booking-service
spring.cloud.gateway.routes[4].uri=http://localhost:8085

spring.cloud.gateway.routes[4].predicates[0]=Path=/api/hotel-booking/**
